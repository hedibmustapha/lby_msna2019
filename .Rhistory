weights <- dm_weights(df, x_name, group_var, group)
args <- list(...)
args <- unlist(args)
if (!is.null(group) & nrow(df) == length(x)) {
x <- x[df[[group_var]] == group]
}
x <- x[!is.na(x)]
if (length(x) == 0) {
NA
} else {
pct <- sum((x %in% args) * weights) / sum(weights)
round(100 * pct, digits)
}
}
num_percent_response_01 <- function(x, df, ...,x_name = NULL, group = NULL, digits =2) {
if (is.null(x_name)) {
x_name <- deparse(substitute(x))
}
group_var <- group_vars(df)
weights <- dm_weights(df, x_name, group_var, group)
args <- list(...)
args <- unlist(args)
if (!is.null(group) & nrow(df) == length(x)) {
x <- x[df[[group_var]] == group]
}
x <- x[!is.na(x)]
if (length(x) == 0) {
NA
} else {
pct <- sum((x %in% args) * weights) / sum(weights)
round(pct, digits)
}
}
# get percent of response
select_percents <- function(x, n, df, survey_sheet, choice_sheet, return_what, language = "english", exclude = NULL, x_name = NULL, group = NULL, digits = 1) {
if (is.null(x_name)) {
x_name <- deparse(substitute(x))
}
group_var <- group_vars(df)
weights <- dm_weights(df, x_name, group_var, group)
# basic setup
if (!is.null(group) & nrow(df) == length(x)) {
x <- x[df[[group_var]] == group]
}
x <- x[!is.na(x)]
if (length(x) == 0) {
if (return_what == "label") {
NA_character_
} else {
NA_integer_
}
} else {
# Getting choices and labels
l_name <- filter(survey_sheet, name == x_name)$type
l_name <- str_remove(l_name, "(select_one |select_multiple )")
choices <- filter(choice_sheet, list_name == l_name)$name
if (!is.null(language)) {
cols <- names(choice_sheet)
col <- str_detect(cols, paste0("label[\\W]{2}(?i)", language))
col <- cols[col]
} else {
col <- "label"
}
labels <- filter(choice_sheet, list_name == l_name)[[col]]
# finding instances of choice options
choice_rgx <- str_c("\\b", choices, "\\b")
counts <- map_dbl(choice_rgx, ~sum(str_count(x, .x) * weights))
if (!is.null(exclude)) {
choices <- choices[order(counts, decreasing = T)]
while (choices[n] %in% exclude | is.na(choices[n])) {
n <- n + 1
}
}
if (return_what == "label") {
labels <- labels[order(counts, decreasing = T)]
labels[n]
} else if (return_what == "percent") {
counts <- counts[order(counts, decreasing = T)]
round(100 * (counts[n] / sum(weights)), digits)
}
}
}
# spread multiple columns
big_spread <- function(df, key, value) {
# quote key
keyq <- enquo(key)
# break value vector into quotes
valueq <- enquo(value)
s <- quos(!!valueq)
df %>% gather(variable, value, !!!s) %>%
unite(temp, !!keyq, variable) %>%
spread(temp, value)
}
# get names from ellipsis
ellipsis_names <- function(...) {
args <- as.list(substitute(list(...)))[-1L]
map_chr(args, deparse)
}
# concatenate columns into string based on value
str_concat <- function(val, ...) {
col_names <- ellipsis_names(...)
cols <- list(...)
cols_match <- map(cols, str_detect, val)
cols <- map2(cols_match, col_names, ~ ifelse(.x, .y, ""))
string <- do.call(paste, cols) %>%
str_remove_all("\\bNA\\b") %>%
str_squish
string[string == ""] <- NA
string
}
results <- from_analysisplan_map_to_output(data = lsg_three_four1,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
library(composr)
library(stringr)
library(hypegrammaR)
library(dplyr)
source("code/data_merge_functions.R")
source("code/functions.R")
rounded_mean <- function(...){
round(...,digits = 0)
}
Sys.setlocale("LC_ALL", "C")
#questions <- load_data("./input/edited_survey_datamerge.csv")
choices <- read.csv("./input/edited_choices_datamerge.csv", stringsAsFactors = F)
questions <- read.csv("./input/edited_survey_datamerge.csv" , stringsAsFactors = F)
choices$label..english..en. <- gsub("^\\d+[.]\\s*","", choices$label..english..en.)
choices$label..english..en. <- gsub("^\\d+[.]\\s*","", choices$label..english..en.)
View(choices)
choices$label..english..en.
choices$label..english..en.
choices$label..English..en. <- gsub("^\\d+[.]\\s*","", choices$label..English..en.)
data <- load_data(file = "./input/data.csv")
data <- mutate_if(data, is.character, na_if, "")
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label..English..en.")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
ci_prep_data <- data %>% mutate(
problems_faced_returnees = str_concat("yes",
house_occupied,
inability_prove_legal_ownership,
hostility_from_local_community,
lack_security_area,
parts_house_property_destroyed,
missing_valuables_house_property,
inability_move_freely,
basic_services_hh_nolonger_working,
basic_services_community_nolonger_working,
mobilephone_network_nolonger_working,
other_problem_faced),
total_income = rowSums(select(.,gvt_salary,gvt_social_benefits,non_gvt_salary,casual_labour,
own_business_income,
remittances,
family_support,humanitarian_assistance,zakat,income_other)
, na.rm=T),
total_income_without_0 = ifelse(total_income ==0, NA, total_income),
age_dependecny_ratio = (nb_infants_male+nb_children_male+nb_infants_female+nb_children_female+
nb_elderly_male+nb_elderly_female) / (nb_youth_male+nb_youth_male+nb_adults_male+nb_adults_female),
working_minors_nb = rowSums(select(.,calcul_jobs_minors_male_nb,calcul_jobs_minors_female_nb),na.rm = T),
enrolled_notattending = rowSums(select(.,enrolled_school_male_6_14:enrolled_school_female_15_17),na.rm = T)-
rowSums(select(.,attended_school_male_6_14:attended_school_female_15_17),na.rm = T),
not_enrolled = rowSums(select(.,school_aged_boys,school_aged_girls),na.rm = T)-
rowSums(select(.,enrolled_school_male_6_14:enrolled_school_female_15_17),na.rm = T),
fcs = (cereals * 2) + (legumes * 3) + veggies + fruits + (meat * 4) + (dairy * 4) + (fats * 0.5) + (sugar * 0.5),
fcs_category = case_when(
fcs <= 28 ~ "poor",
fcs > 28 & fcs <= 42 ~ "borderline",
fcs > 42 ~ "acceptable"
),
rcsi = less_expensive_quality + (borrow_relatives * 2) + reduce_number_meals + (reduce_adult * 3) + shrink_meals,
rcsi_category = case_when(
rcsi <= 3 ~ "low",
rcsi > 3 & rcsi <= 9 ~ "medium",
rcsi > 9 ~ "high"
),
cash_coping_stress = rowSums(select(.,
sold_nonproductive_hh_assets,
spent_savings,
borrowed_purchased_oncredit_food,
reduced_expenditures_essential_nfi) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping_crisis = rowSums(select(.,
sold_productive_hh_assets,
borrowed_money,
reduced_expenditures_health_education,
took_additional_job) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping_emergency = rowSums(select(.,
begging,
adult_accepting_degrading_illegal_work,
minor_accepting_degrading_illegal_work,
child_marriage) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping = case_when(
cash_coping_emergency > 0 ~ "emergency",
cash_coping_crisis > 0 ~ "crisis",
cash_coping_stress > 0 ~ "stress",
cash_coping_emergency + cash_coping_crisis + cash_coping_stress == 0 ~ "none"
),
have_docs_inprocess = rowSums(select(.,
property_docs:other_docs) %>%
mutate_all(~ .x %in% c("everyone_has_legal_doc","process_renewing_doc")),
na.rm = T),
dont_have_cannot_obtain_docs = rowSums(select(.,
property_docs:other_docs) %>%
mutate_all(~ .x %in% c("not_everyone_has_legal_doc",
"unable_obtain_doc",
"lost_doc_conflict")),
na.rm = T),
minor_some_difficulties = rowSums(select(.,starts_with("minor_difficulties_carrying_activities"),
starts_with("some_difficulties_carrying_activities")),
na.rm = T),
alot_cannot_difficulties = rowSums(select(.,starts_with("alot_difficulties_carrying_activities"),
starts_with("cannot_carry_activities")),
na.rm = T)
)
many_records <- read.csv("./input/libyan_msna_composite_indicator_v1.csv")
ci_data <- ci_prep_data %>% recode_batch(tos = many_records$to_values,
wheres = many_records$conditions,
targets = many_records$target_variables,
questionnaire = questionnaire) %>%
end_recoding()
View(ci_data)
composite_data <- ci_data %>%
mutate(preexisting_vulnerability_score = ifelse(preexisting_vulnerability_index1 >= 3 & !is.na(preexisting_vulnerability_index1) |
preexisting_vulnerability_index6 >= 3 & !is.na(preexisting_vulnerability_index6) |
preexisting_vulnerability_index7 >= 3 & !is.na(preexisting_vulnerability_index7),
pmax(preexisting_vulnerability_index1,preexisting_vulnerability_index6,
preexisting_vulnerability_index7, na.rm = T),
rounded_mean(rowMeans(select(., preexisting_vulnerability_index1:preexisting_vulnerability_index7), na.rm = T))),
impact_score = ifelse(impact_index5 >= 3 & !is.na(impact_index5)|
impact_index8 >= 3 & !is.na(impact_index8)|
impact_index1 >= 3 & !is.na(impact_index1)|
impact_index2 >= 3 & !is.na(impact_index2)
,
pmax(impact_index1,impact_index5,impact_index8,impact_index2,na.rm = T),
rounded_mean(rowMeans(select(., impact_index1:impact_index9), na.rm = T))),
protection_score = ifelse(protection_index2 >= 3 & !is.na(protection_index2) |
protection_index5 >= 3 & !is.na(protection_index5),
pmax(protection_index2,protection_index5,na.rm = T),
rounded_mean(rowMeans(select(.,protection_index1:protection_index6), na.rm = T))),
shelter_nfi_score = ifelse(shelter_nfi_index2 >= 3 & !is.na(shelter_nfi_index2)|
shelter_nfi_index1 >= 3 & !is.na(shelter_nfi_index1),
pmax(shelter_nfi_index1,shelter_nfi_index2,na.rm = T),
rounded_mean(rowMeans(select(., shelter_nfi_index1:shelter_nfi_index4), na.rm = T))),
fs_score = ifelse(fcs_index1 >= 4 & !is.na(fcs_index1),
fcs_index1,
rounded_mean(rowMeans(select(., fcs_index1:fcs_index4), na.rm = T))),
health_score = health_index1,
wash_score = ifelse(wash_index1 >= 3 & !is.na(wash_index1) |
wash_index3 >= 3 & !is.na(wash_index3),
pmax(wash_index1,wash_index3,na.rm = T),
rounded_mean(rowMeans(select(., wash_index1:wash_index5), na.rm = T))),
education_score = ifelse(education_index2 >= 4 & !is.na(education_index2) |
education_index1 >= 3 & !is.na(education_index1),
pmax(education_index1,education_index2,na.rm = T),
rounded_mean(rowMeans(select(., education_index1:education_index2), na.rm = T))),
capacity_gap_score = capacitygap_index1
)
lsg_three_four <- composite_data %>% mutate(
protection = ifelse(protection_score >=3,1,0),
shelter = ifelse(shelter_nfi_score >=3,1,0),
fs = ifelse(fs_score >=3,1,0),
health = ifelse(health_score>=3,1,0),
wash = ifelse(health_score>=3,1,0),
education = ifelse(education_score>=3,1,0),
capacity_gap = ifelse(capacity_gap_score>=3,1,0),
vul_atlease_one = ifelse(protection+shelter+fs+health+wash+education+capacity_gap>=1,"yes","no")
)
lsg_three_four$preexisting_vulnerability_score
secondary_analysis <- lsg_three_four %>% mutate(
request_1 = ifelse(vul_atlease_one == "yes" & preexisting_vulnerability_score >=3,"yes","no"),
request_2 = ifelse(vul_atlease_one == "yes" & sm_selected(x = humanitarian_assistance_barriers,
none = c("no_barriers_humanitarian_assistance","notaware_ofany_assistance","dk","dwta")),"yes","no"),
request_3 = ifelse(vul_atlease_one == "yes" & sm_selected(x = humanitarian_assistance_barriers,
any = c("notaware_ofany_assistance")),"yes","no"),
request_4 = ifelse(vul_atlease_one == "yes" & sm_selected(x = humanitarian_assistance_barriers,
exactly = c("no_barriers_humanitarian_assistance")),"yes","no")
)
View(secondary_analysis)
secondary_analysis$request_2
secondary_analysis$displacement_status
seceondary_analysis_plan = load_analysisplan("./input/analysisplan_secondary_analysis.csv")
seceondary_analysis_plan = load_analysisplan("./input/analysisplan_secondary_analysis.csv")
View(seceondary_analysis_plan)
results <- from_analysisplan_map_to_output(data = secondary_analysis,
analysisplan = seceondary_analysis_plan,
weighting = weights,
questionnaire = questionnaire
)
View(results)
map_to_master_table(results_object = results$results, filename = "./output/secondary_analysis_result.csv")
summary.stats.list <- results$results
## SUMMARY STATS LIST FORMATTED WITH p-VALUES ##s
summary.stats.list %>%
lapply((map_to_labeled),questionnaire) %>%
lapply(result_format_numbers) %>%
lapply(add_p_value_to_summary_table) %>%
resultlist_summary_statistics_as_one_table %>%
write.csv("./output/secondary_analysis_result_v2.csv")
results$results
View(summary.stats.list)
lsg_three_four <- composite_data %>% mutate(
protection = ifelse(protection_score >=3,1,0),
shelter = ifelse(shelter_nfi_score >=3,1,0),
fs = ifelse(fs_score >=3,1,0),
health = ifelse(health_score>=3,1,0),
wash = ifelse(health_score>=3,1,0),
education = ifelse(education_score>=3,1,0),
capacity_gap = ifelse(capacity_gap_score>=4,1,0),
vul_atlease_one = ifelse(protection+shelter+fs+health+wash+education+capacity_gap>=1,"yes","no")
)
View(seceondary_analysis_plan)
library(composr)
library(stringr)
library(hypegrammaR)
library(dplyr)
source("code/data_merge_functions.R")
source("code/functions.R")
rounded_mean <- function(...){
round(...,digits = 0)
}
Sys.setlocale("LC_ALL", "C")
#questions <- load_data("./input/edited_survey_datamerge.csv")
choices <- read.csv("./input/edited_choices_datamerge.csv", stringsAsFactors = F)
questions <- read.csv("./input/edited_survey_datamerge.csv" , stringsAsFactors = F)
choices$label..English..en. <- gsub("^\\d+[.]\\s*","", choices$label..English..en.)
data <- load_data(file = "./input/data.csv")
data <- mutate_if(data, is.character, na_if, "") # ibadal el vide eb NA fel strings
sampling_frame <- load_samplingframe(file = "./input/sampling_frame.csv")
questionnaire <- load_questionnaire(data = data,
questions = questions,
choices = choices,
choices.label.column.to.use = "label..English..en.")
weights <-map_to_weighting(sampling.frame = sampling_frame,
data.stratum.column = "strata.names",
sampling.frame.population.column = "population",
sampling.frame.stratum.column = "strata.names",
data = data)
analysisplan <- load_analysisplan(file = "./input/composite_indicators_analysisplan_24012020.csv")
ci_prep_data <- data %>% mutate(
problems_faced_returnees = str_concat("yes",
house_occupied,
inability_prove_legal_ownership,
hostility_from_local_community,
lack_security_area,
parts_house_property_destroyed,
missing_valuables_house_property,
inability_move_freely,
basic_services_hh_nolonger_working,
basic_services_community_nolonger_working,
mobilephone_network_nolonger_working,
other_problem_faced),
total_income = rowSums(select(.,gvt_salary,gvt_social_benefits,non_gvt_salary,casual_labour,
own_business_income,
remittances,
family_support,humanitarian_assistance,zakat,income_other)
, na.rm=T),
total_income_without_0 = ifelse(total_income ==0, NA, total_income),
age_dependecny_ratio = (nb_infants_male+nb_children_male+nb_infants_female+nb_children_female+
nb_elderly_male+nb_elderly_female) / (nb_youth_male+nb_youth_male+nb_adults_male+nb_adults_female),
working_minors_nb = rowSums(select(.,calcul_jobs_minors_male_nb,calcul_jobs_minors_female_nb),na.rm = T),
enrolled_notattending = rowSums(select(.,enrolled_school_male_6_14:enrolled_school_female_15_17),na.rm = T)-
rowSums(select(.,attended_school_male_6_14:attended_school_female_15_17),na.rm = T),
not_enrolled = rowSums(select(.,school_aged_boys,school_aged_girls),na.rm = T)-
rowSums(select(.,enrolled_school_male_6_14:enrolled_school_female_15_17),na.rm = T),
fcs = (cereals * 2) + (legumes * 3) + veggies + fruits + (meat * 4) + (dairy * 4) + (fats * 0.5) + (sugar * 0.5),
fcs_category = case_when(
fcs <= 28 ~ "poor",
fcs > 28 & fcs <= 42 ~ "borderline",
fcs > 42 ~ "acceptable"
),
rcsi = less_expensive_quality + (borrow_relatives * 2) + reduce_number_meals + (reduce_adult * 3) + shrink_meals,
rcsi_category = case_when(
rcsi <= 3 ~ "low",
rcsi > 3 & rcsi <= 9 ~ "medium",
rcsi > 9 ~ "high"
),
cash_coping_stress = rowSums(select(.,
sold_nonproductive_hh_assets,
spent_savings,
borrowed_purchased_oncredit_food,
reduced_expenditures_essential_nfi) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping_crisis = rowSums(select(.,
sold_productive_hh_assets,
borrowed_money,
reduced_expenditures_health_education,
took_additional_job) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping_emergency = rowSums(select(.,
begging,
adult_accepting_degrading_illegal_work,
minor_accepting_degrading_illegal_work,
child_marriage) %>%
mutate_all(~ .x %in% c("already_exhausted_this_coping_strategy", "yes")),
na.rm = T),
cash_coping = case_when(
cash_coping_emergency > 0 ~ "emergency",
cash_coping_crisis > 0 ~ "crisis",
cash_coping_stress > 0 ~ "stress",
cash_coping_emergency + cash_coping_crisis + cash_coping_stress == 0 ~ "none"
),
have_docs_inprocess = rowSums(select(.,
property_docs:other_docs) %>%
mutate_all(~ .x %in% c("everyone_has_legal_doc","process_renewing_doc")),
na.rm = T),
dont_have_cannot_obtain_docs = rowSums(select(.,
property_docs:other_docs) %>%
mutate_all(~ .x %in% c("not_everyone_has_legal_doc",
"unable_obtain_doc",
"lost_doc_conflict")),
na.rm = T),
minor_some_difficulties = rowSums(select(.,starts_with("minor_difficulties_carrying_activities"),
starts_with("some_difficulties_carrying_activities")),
na.rm = T),
alot_cannot_difficulties = rowSums(select(.,starts_with("alot_difficulties_carrying_activities"),
starts_with("cannot_carry_activities")),
na.rm = T)
)
many_records <- read.csv("./input/libyan_msna_composite_indicator_v1.csv")
ci_data <- ci_prep_data %>% recode_batch(tos = many_records$to_values,
wheres = many_records$conditions,
targets = many_records$target_variables,
questionnaire = questionnaire) %>%
end_recoding()
composite_data <- ci_data %>%
mutate(preexisting_vulnerability_score = ifelse(preexisting_vulnerability_index1 >= 3 & !is.na(preexisting_vulnerability_index1) |
preexisting_vulnerability_index6 >= 3 & !is.na(preexisting_vulnerability_index6) |
preexisting_vulnerability_index7 >= 3 & !is.na(preexisting_vulnerability_index7),
pmax(preexisting_vulnerability_index1,preexisting_vulnerability_index6,
preexisting_vulnerability_index7, na.rm = T),
rounded_mean(rowMeans(select(., preexisting_vulnerability_index1:preexisting_vulnerability_index7), na.rm = T))),
impact_score = ifelse(impact_index5 >= 3 & !is.na(impact_index5)|
impact_index8 >= 3 & !is.na(impact_index8)|
impact_index1 >= 3 & !is.na(impact_index1)|
impact_index2 >= 3 & !is.na(impact_index2)
,
pmax(impact_index1,impact_index5,impact_index8,impact_index2,na.rm = T),
rounded_mean(rowMeans(select(., impact_index1:impact_index9), na.rm = T))),
protection_score = ifelse(protection_index2 >= 3 & !is.na(protection_index2) |
protection_index5 >= 3 & !is.na(protection_index5),
pmax(protection_index2,protection_index5,na.rm = T),
rounded_mean(rowMeans(select(.,protection_index1:protection_index6), na.rm = T))),
shelter_nfi_score = ifelse(shelter_nfi_index2 >= 3 & !is.na(shelter_nfi_index2)|
shelter_nfi_index1 >= 3 & !is.na(shelter_nfi_index1),
pmax(shelter_nfi_index1,shelter_nfi_index2,na.rm = T),
rounded_mean(rowMeans(select(., shelter_nfi_index1:shelter_nfi_index4), na.rm = T))),
fs_score = ifelse(fcs_index1 >= 4 & !is.na(fcs_index1),
fcs_index1,
rounded_mean(rowMeans(select(., fcs_index1:fcs_index4), na.rm = T))),
health_score = health_index1,
wash_score = ifelse(wash_index1 >= 3 & !is.na(wash_index1) |
wash_index3 >= 3 & !is.na(wash_index3),
pmax(wash_index1,wash_index3,na.rm = T),
rounded_mean(rowMeans(select(., wash_index1:wash_index5), na.rm = T))),
education_score = ifelse(education_index2 >= 4 & !is.na(education_index2) |
education_index1 >= 3 & !is.na(education_index1),
pmax(education_index1,education_index2,na.rm = T),
rounded_mean(rowMeans(select(., education_index1:education_index2), na.rm = T))),
capacity_gap_score = capacitygap_index1
)
lsg_three_four <- composite_data %>% mutate(
protection = ifelse(protection_score >=3,1,0),
shelter = ifelse(shelter_nfi_score >=3,1,0),
fs = ifelse(fs_score >=3,1,0),
health = ifelse(health_score>=3,1,0),
wash = ifelse(health_score>=3,1,0),
education = ifelse(education_score>=3,1,0),
capacity_gap = ifelse(capacity_gap_score>=4,1,0),
vul_atlease_one = ifelse(protection+shelter+fs+health+wash+education+capacity_gap>=1,"yes","no")
)
View(analysisplan)
results <- from_analysisplan_map_to_output(data = lsg_three_four,
analysisplan = analysisplan,
weighting = weights,
questionnaire = questionnaire
)
View(ci_data)
summary.stats.list <- results$results
## SUMMARY STATS LIST FORMATTED WITH p-VALUES ##s
summary.stats.list %>%
lapply((map_to_labeled),questionnaire) %>%
lapply(result_format_numbers) %>%
lapply(add_p_value_to_summary_table) %>%
resultlist_summary_statistics_as_one_table %>%
write.csv("./output/composite_indicators_results_25022020v2.csv")
ci_data$impact_index1
data$ipmact_index
questionnaire
questionnaire
View(questionnaire)
View(many_records)
View(many_records)
View(many_records)
colnames(ci_prep_data)
ci_prep_data$crop_production_impact_reasons.crops_seized_destroyed
ci_data$impact_index1
